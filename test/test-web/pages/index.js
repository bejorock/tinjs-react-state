import Head from "next/head";
import { useReducer, useState } from "react";
import styles from "../styles/Home.module.css";
import {
  useKvTable,
  useObserver,
  usePersistentReducer,
  usePersistentState,
} from "@tinqjs/tinjs-react-state";

const flex = {
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  gap: "2rem",
};

const container = {
  ...flex,
  marginTop: "2rem",
};

const input = {
  width: "50px",
};

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TemporaryStateExample />
      <PersistentStateExample />
      <PersistentReducerExample />
      <KvTableExample />
      <ObserverExample />
    </div>
  );
}

function TemporaryStateExample() {
  const [tmpState, setTmpState] = useState("initial value");

  return (
    <div style={container}>
      <div>Temporary State</div>
      <div>
        <input type="text" onChange={(e) => setTmpState(e.target.value)} />
      </div>
      <div>data : {tmpState}</div>
    </div>
  );
}

function PersistentStateExample() {
  const [tmpState, setTmpState] = usePersistentState("persistent_state", {
    initialValue: "initial value",
  });

  return (
    <div style={container}>
      <div>Persistent State, </div>
      <div>
        <input type="text" onChange={(e) => setTmpState(e.target.value)} />
      </div>
      <div>data : {tmpState}</div>
    </div>
  );
}

function PersistentReducerExample() {
  const reducer = (oldState, action) => ({ ...oldState, ...action.payload });
  const [tmpState, dispatch] = usePersistentReducer(
    "persistent_reducer",
    reducer,
    {
      initialValue: {
        name: null,
        age: null,
        role: null,
      },
    }
  );

  return (
    <div style={container}>
      <div>Persistent Reducer, </div>
      <div style={flex}>
        <input
          type="text"
          placeholder="name"
          onChange={(e) => dispatch({ payload: { name: e.target.value } })}
          style={input}
        />
        <input
          type="number"
          placeholder="age"
          onChange={(e) => dispatch({ payload: { age: e.target.value } })}
          style={input}
        />
        <input
          type="role"
          placeholder="role"
          onChange={(e) => dispatch({ payload: { role: e.target.value } })}
          style={input}
        />
      </div>
      <div>
        data : {tmpState.name} - {tmpState.age} - {tmpState.role}
      </div>
    </div>
  );
}

function KvTableExample() {
  const reducer = (oldState, action) => ({ ...oldState, ...action.payload });
  const [state, dispatch] = useReducer(reducer, {
    name: null,
    age: null,
    role: null,
  });
  const [text, setText] = useState();

  const { records, first, last, upsert, merge, remove } = useKvTable(
    "kv_table",
    "name",
    {
      initialValues: [],
    }
  );

  const handleUpsert = () => upsert(state);
  const handleMerge = () => {
    if (!text) return;

    const tmp = [];
    const tokens = text.split("\n");
    for (let token of tokens) {
      const item = token.split(",");

      tmp.push({
        name: item[0],
        age: item[1],
        role: item[2],
      });
    }

    merge(tmp);
  };

  return (
    <>
      <div style={container}>
        <div>KV Table Upsert, </div>
        <div style={flex}>
          <input
            type="text"
            placeholder="name"
            onChange={(e) => dispatch({ payload: { name: e.target.value } })}
            style={input}
          />
          <input
            type="number"
            placeholder="age"
            onChange={(e) => dispatch({ payload: { age: e.target.value } })}
            style={input}
          />
          <input
            type="role"
            placeholder="role"
            onChange={(e) => dispatch({ payload: { role: e.target.value } })}
            style={input}
          />
        </div>
        <div>
          <button type="button" onClick={() => handleUpsert()}>
            Add Item
          </button>
        </div>
      </div>
      <div style={container}>
        <div>KV Table merge, </div>
        <div>
          <textarea rows={5} onChange={(e) => setText(e.target.value)} />
        </div>
        <div>
          <button type="button" onClick={() => handleMerge()}>
            Merge Items
          </button>
        </div>
      </div>
      <div>
        <ul>
          {records.map((item, i) => (
            <li key={i}>
              {item.name}, {item.age}, {item.role}{" "}
              <a
                href="#"
                onClick={(e) => {
                  e.preventDefault();

                  remove(item.name);
                }}
              >
                [X]
              </a>
            </li>
          ))}
        </ul>
      </div>
      <div>
        first value {first()?.name}, last value {last()?.name}
      </div>
    </>
  );
}

function ObserverExample() {
  const [lazyState, setLazyState] = useState();
  const { emitter, isLoading } = useObserver(createSamplePromise, {
    next(item) {
      setLazyState(item);
    },

    error(err) {
      alert(err.message);
    },
  });

  return (
    <div style={container}>
      <div>Observer, </div>
      <div>Value : {lazyState}</div>
      <div>
        {isLoading ? (
          "Wait..."
        ) : (
          <button type="button" onClick={() => emitter(Date.now())}>
            Load Data
          </button>
        )}
      </div>
    </div>
  );
}

function createSamplePromise(input) {
  return new Promise((resolve) => setTimeout(() => resolve(input), 3000));
}
