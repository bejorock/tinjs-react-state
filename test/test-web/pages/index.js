import Head from "next/head";
import { useState } from "react";
import styles from "../styles/Home.module.css";
import {
  useKvTable,
  usePersistentReducer,
  usePersistentState,
} from "@tinqjs/tinjs-react-state";

const flex = {
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  gap: "2rem",
};

const container = {
  ...flex,
  marginTop: "2rem",
};

const input = {
  width: "50px",
};

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TemporaryStateExample />
      <PersistentStateExample />
      <PersistentReducerExample />
    </div>
  );
}

function TemporaryStateExample() {
  const [tmpState, setTmpState] = useState("initial value");

  return (
    <div style={container}>
      <div>Temporary State</div>
      <div>
        <input type="text" onChange={(e) => setTmpState(e.target.value)} />
      </div>
      <div>data : {tmpState}</div>
    </div>
  );
}

function PersistentStateExample() {
  const [tmpState, setTmpState] = usePersistentState("persistent_state", {
    initialValue: "initial value",
  });

  return (
    <div style={container}>
      <div>Persistent State, </div>
      <div>
        <input type="text" onChange={(e) => setTmpState(e.target.value)} />
      </div>
      <div>data : {tmpState}</div>
    </div>
  );
}

function PersistentReducerExample() {
  const reducer = (oldState, action) => ({ ...oldState, ...action.payload });
  const [tmpState, dispatch] = usePersistentReducer(
    "persistent_reducer",
    reducer,
    {
      initialValue: {
        name: null,
        age: null,
        role: null,
      },
    }
  );

  return (
    <div style={container}>
      <div>Persistent Reducer, </div>
      <div style={flex}>
        <input
          type="text"
          placeholder="name"
          onChange={(e) => dispatch({ payload: { name: e.target.value } })}
          style={input}
        />
        <input
          type="number"
          placeholder="age"
          onChange={(e) => dispatch({ payload: { age: e.target.value } })}
          style={input}
        />
        <input
          type="role"
          placeholder="role"
          onChange={(e) => dispatch({ payload: { role: e.target.value } })}
          style={input}
        />
      </div>
      <div>
        data : {tmpState.name} - {tmpState.age} - {tmpState.role}
      </div>
    </div>
  );
}

function KvTableExample() {
  const {} = useKvTable("kv_table", "id", {
    initialValues: [],
  });

  return (
    <div style={container}>
      <div></div>
    </div>
  );
}
